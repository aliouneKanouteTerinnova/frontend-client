on:
  push:
    branches:
      - feature/new-ui-buyer-navbar

name: CICD for Vaanah frontend-client
jobs:
  analyze-code-QL:
    permissions:
      security-events: write
      actions: read
    name: Analyze
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: ["TypeScript"]
    steps:
      - name: Checkout repository
        id: checkout_repo
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        id: init_codeQL
        uses: github/codeql-action/init@v1
        # Override language selection by uncommenting this and choosing your languages
        with:
          languages: ${{matrix.language}}
          queries: security-and-quality

      - name: Perform codeQL analyse
        id: analyze_codeQL
        uses: github/codeql-action/analyze@v1

  build-and-push:
    name: Vaanah Front Satging Pipeline Deployment
    runs-on: ubuntu-latest
    steps:
      # Check status
      - name: Check commit status
        id: commit-status
        run: |
          # Check the status of the Git commit
          CURRENT_STATUS=$(curl --url https://api.github.com/vaanah/${{ github.repository }}/commits/${{ github.sha }}/status --header 'authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}' | jq -r '.state');
          echo "Current status is: $CURRENT_STATUS"
          while [ "${CURRENT_STATUS^^}" = "PENDING" ];
            do sleep 10;
            CURRENT_STATUS=$(curl --url https://api.github.com/frontend-client/${{ github.repository }}/commits/${{ github.sha }}/status --header 'authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}' | jq -r '.state');
          done;
          echo "Current status is: $CURRENT_STATUS"
          if [ "${CURRENT_STATUS^^}" = "FAILURE" ];
            then echo "Commit status failed. Canceling execution";
            exit 1;
          fi

      # Checkout Commit
      - name: Checkout
        uses: actions/checkout@v1

      # Cache Memory
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Login to DockerHub  
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # Docker Build and Push

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1
      
      # 
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/vaana-new-ui:v0.1
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      # Deploy to staging with Ansible Playbook
      - name: Play Ansible Playbook
        uses: arillso/action.playbook@master
        with:
          playbook: iac/deploy_dev.yml
          inventory: iac/hosts.yml
          private_key: ${{ secrets.SSH_PRIVATE_KEY }}
        #         galaxy_file: tests/requirements.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: 'false'
          ANSIBLE_DEPRECATION_WARNINGS: 'false'

#       - name: Run playbook
#         uses: dawidd6/action-ansible-playbook@v2
#         with:
#           playbook: deploy_dev.yml
#           directory: ./
#           key: ${{secrets.SSH_PRIVATE_KEY}}
#           inventory: |
# #            [all]
# #            example.com

#             [webserver]
#             ubuntu@18.193.203.105
#           vault_password: ${{secrets.VAULT_PASSWORD}}
#           options: |
#             --limit webserver
#             --extra-vars hello=there
#             --verbose
